syntax = "proto3";
package protos;
option go_package = "/protos";


service RegistryServer {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc Deregister(DeregisterRequest) returns (DeregisterResponse);
    rpc Discover(DiscoveryRequest) returns (DiscoveryResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
}

message ServiceInstance {
    string              Service_name    = 1;
    string              Instance_id     = 2;
    string              Addr            = 3;
    bool                Frontend        = 4;
    map<string, int32>  Messages        = 5;
}

message RegisterRequest {
    ServiceInstance     Instances       = 1;
}
message RegisterResponse {
}

message DeregisterRequest {
    ServiceInstance     Instances       = 1;
}
message DeregisterResponse {
}

message DiscoveryRequest {
    string              Service_name    = 1;
}
message DiscoveryResponse {
    repeated  ServiceInstance Instances = 1;
}

message HeartbeatRequest {
    ServiceInstance     Instances       = 1;
}
message HeartbeatResponse {
}

service MembersServer {
    rpc NewMembers(NewMembersRequest) returns (NewMembersResponse);
    rpc DelMembers(DelMembersRequest) returns (DelMembersResponse);
}

message NewMembersRequest {
    ServiceInstance     Instances       = 1;
}
message NewMembersResponse {
}

message DelMembersRequest {
    string              Service_name    = 1;
    string              Instance_id     = 2;
}
message DelMembersResponse {
    string              Service_name    = 1;
    string              Instance_id     = 2;
}

service RemoteServer {
    rpc Receive(stream RemoteMessage) returns (RemoteMessage);
}

message RPCMessage {
    int64   SessionID              = 1;
    int64   Seq                    = 2;
    bytes   Data                   = 3;
    string  Route                  = 4; // User/C2SLogin
}

message NotifyMessage {
    int64   SessionID              = 1;
    bytes   Data                   = 2;
    string  Route                  = 3;
}

message PushMessage {
    int64   SessionID              = 1;
    bytes   Data                   = 2;
}

message OnSessionBindUIDMessage {
    int64   SessionID              = 1;
    int64   UID                    = 2;
}

message OnSessionConnectMessage {
    int64   UID                    = 1;
    map<string, ServiceInstance>    Instances = 2;
}

message OnSessionDisconnectionMessage {
    int64   UID                    = 1;
}

message RemoteMessage {
    enum Kind {
        KIND_UNKNOWN               = 0;
        KIND_RPC                   = 1;
        KIND_NOTIFY                = 2;
        KIND_PUSH                  = 3;
        KIND_ON_SESSION_BIND_UID   = 4;
        KIND_ON_SESSION_CONNECT    = 5;
        KIND_ON_SESSION_DISCONNECT = 6;
    }
    Kind                            kind                          = 1;
    RPCMessage                      RPCMessage                    = 2;
    NotifyMessage                   NotifyMessage                 = 3;
    PushMessage                     PushMessage                   = 4;
    OnSessionBindUIDMessage         OnSessionBindUIDMessage       = 5;
    OnSessionConnectMessage         OnSessionConnectMessage       = 6;
    OnSessionDisconnectionMessage   OnSessionDisconnectionMessage = 7;
}
