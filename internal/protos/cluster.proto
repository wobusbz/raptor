syntax = "proto3";
package protos;
option go_package = "./;protos";

service RegistryServer {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc Deregister(DeregisterRequest) returns (DeregisterResponse);
    rpc Heartbeat(HeartbeatRequest) returns (HeartbeatResponse);
    rpc NewMembers(NewMembersRequest) returns (NewMembersResponse);
    rpc DelMembers(DelMembersRequest) returns (DelMembersResponse);
}

message ServiceInstance {
    string              Service_name    = 1;
    string              Instance_id     = 2;
    string              Addr            = 3;
    bool                Frontend        = 4;
    map<uint32, string> Messages        = 5;
}

message RegisterRequest {
    ServiceInstance     Instances       = 1;
}
message RegisterResponse {
}

message DeregisterRequest {
    ServiceInstance     Instances       = 1;
}
message DeregisterResponse {
}

message HeartbeatRequest {
    ServiceInstance     Instances       = 1;
}
message HeartbeatResponse {
}


message NewMembersRequest {
    repeated ServiceInstance     Instances       = 1;
}
message NewMembersResponse {
}

message DelMembers{
    string              Service_name    = 1;
    string              Instance_id     = 2;
}
message DelMembersRequest {
    repeated DelMembers DelMembers      = 1;
}
message DelMembersResponse {
}
 
service RemoteServer {
    rpc Receive(stream RemoteMessage) returns (stream RemoteMessage);
}

message RPCMessage {
    int64   SessionID              = 1;
    int64   Seq                    = 2;
    bytes   Data                   = 3;
    string  Route                  = 4;
    string  SvrName                = 5;
    string  ModelName              = 6;
    string  FuncName               = 7;
}

message NotifyMessage {
    int64   SessionID              = 1;
    bytes   Data                   = 2;
    string  Route                  = 3;
}

message PushMessage {
    int64   SessionID              = 1;
    int32   MessageId              = 2;
    bytes   Data                   = 3;
}

message OnSessionBindUIDMessage {
    int64   SessionID              = 1;
    int64   UID                    = 2;
}

message OnSessionConnectMessage {
    int64   ID                     = 1;
    map<string, ServiceInstance>    Instances = 2;
}

message RemoteMessage {
    enum Kind {
        KIND_UNKNOWN               = 0;
        KIND_RPC                   = 1;
        KIND_NOTIFY                = 2;
        KIND_PUSH                  = 3;
        KIND_ON_SESSION_BIND_UID   = 4;
        KIND_ON_SESSION_CONNECT    = 5;
        KIND_ON_SESSION_DISCONNECT = 6;
    }
    int64                           SessionID                     = 1;
    Kind                            kind                          = 2;
    RPCMessage                      RPCMessage                    = 3;
    NotifyMessage                   NotifyMessage                 = 4;
    PushMessage                     PushMessage                   = 5;
    OnSessionBindUIDMessage         OnSessionBindUIDMessage       = 6;
    OnSessionConnectMessage         OnSessionConnectMessage       = 7;
}
