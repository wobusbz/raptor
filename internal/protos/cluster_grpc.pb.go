// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: cluster.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RegistryServer_Register_FullMethodName   = "/protos.RegistryServer/Register"
	RegistryServer_Deregister_FullMethodName = "/protos.RegistryServer/Deregister"
	RegistryServer_Discover_FullMethodName   = "/protos.RegistryServer/Discover"
	RegistryServer_Heartbeat_FullMethodName  = "/protos.RegistryServer/Heartbeat"
)

// RegistryServerClient is the client API for RegistryServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryServerClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error)
	Discover(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error)
	Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error)
}

type registryServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryServerClient(cc grpc.ClientConnInterface) RegistryServerClient {
	return &registryServerClient{cc}
}

func (c *registryServerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, RegistryServer_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServerClient) Deregister(ctx context.Context, in *DeregisterRequest, opts ...grpc.CallOption) (*DeregisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeregisterResponse)
	err := c.cc.Invoke(ctx, RegistryServer_Deregister_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServerClient) Discover(ctx context.Context, in *DiscoveryRequest, opts ...grpc.CallOption) (*DiscoveryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DiscoveryResponse)
	err := c.cc.Invoke(ctx, RegistryServer_Discover_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryServerClient) Heartbeat(ctx context.Context, in *HeartbeatRequest, opts ...grpc.CallOption) (*HeartbeatResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HeartbeatResponse)
	err := c.cc.Invoke(ctx, RegistryServer_Heartbeat_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServerServer is the server API for RegistryServer service.
// All implementations should embed UnimplementedRegistryServerServer
// for forward compatibility.
type RegistryServerServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	Deregister(context.Context, *DeregisterRequest) (*DeregisterResponse, error)
	Discover(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error)
	Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error)
}

// UnimplementedRegistryServerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegistryServerServer struct{}

func (UnimplementedRegistryServerServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegistryServerServer) Deregister(context.Context, *DeregisterRequest) (*DeregisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deregister not implemented")
}
func (UnimplementedRegistryServerServer) Discover(context.Context, *DiscoveryRequest) (*DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Discover not implemented")
}
func (UnimplementedRegistryServerServer) Heartbeat(context.Context, *HeartbeatRequest) (*HeartbeatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedRegistryServerServer) testEmbeddedByValue() {}

// UnsafeRegistryServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServerServer will
// result in compilation errors.
type UnsafeRegistryServerServer interface {
	mustEmbedUnimplementedRegistryServerServer()
}

func RegisterRegistryServerServer(s grpc.ServiceRegistrar, srv RegistryServerServer) {
	// If the following call pancis, it indicates UnimplementedRegistryServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RegistryServer_ServiceDesc, srv)
}

func _RegistryServer_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServerServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryServer_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServerServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServer_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServerServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryServer_Deregister_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServerServer).Deregister(ctx, req.(*DeregisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServer_Discover_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServerServer).Discover(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryServer_Discover_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServerServer).Discover(ctx, req.(*DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RegistryServer_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServerServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RegistryServer_Heartbeat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServerServer).Heartbeat(ctx, req.(*HeartbeatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RegistryServer_ServiceDesc is the grpc.ServiceDesc for RegistryServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RegistryServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RegistryServer",
	HandlerType: (*RegistryServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _RegistryServer_Register_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _RegistryServer_Deregister_Handler,
		},
		{
			MethodName: "Discover",
			Handler:    _RegistryServer_Discover_Handler,
		},
		{
			MethodName: "Heartbeat",
			Handler:    _RegistryServer_Heartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

const (
	MembersServer_NewMembers_FullMethodName = "/protos.MembersServer/NewMembers"
	MembersServer_DelMembers_FullMethodName = "/protos.MembersServer/DelMembers"
)

// MembersServerClient is the client API for MembersServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersServerClient interface {
	NewMembers(ctx context.Context, in *NewMembersRequest, opts ...grpc.CallOption) (*NewMembersResponse, error)
	DelMembers(ctx context.Context, in *DelMembersRequest, opts ...grpc.CallOption) (*DelMembersResponse, error)
}

type membersServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersServerClient(cc grpc.ClientConnInterface) MembersServerClient {
	return &membersServerClient{cc}
}

func (c *membersServerClient) NewMembers(ctx context.Context, in *NewMembersRequest, opts ...grpc.CallOption) (*NewMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewMembersResponse)
	err := c.cc.Invoke(ctx, MembersServer_NewMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServerClient) DelMembers(ctx context.Context, in *DelMembersRequest, opts ...grpc.CallOption) (*DelMembersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DelMembersResponse)
	err := c.cc.Invoke(ctx, MembersServer_DelMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServerServer is the server API for MembersServer service.
// All implementations should embed UnimplementedMembersServerServer
// for forward compatibility.
type MembersServerServer interface {
	NewMembers(context.Context, *NewMembersRequest) (*NewMembersResponse, error)
	DelMembers(context.Context, *DelMembersRequest) (*DelMembersResponse, error)
}

// UnimplementedMembersServerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMembersServerServer struct{}

func (UnimplementedMembersServerServer) NewMembers(context.Context, *NewMembersRequest) (*NewMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewMembers not implemented")
}
func (UnimplementedMembersServerServer) DelMembers(context.Context, *DelMembersRequest) (*DelMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelMembers not implemented")
}
func (UnimplementedMembersServerServer) testEmbeddedByValue() {}

// UnsafeMembersServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServerServer will
// result in compilation errors.
type UnsafeMembersServerServer interface {
	mustEmbedUnimplementedMembersServerServer()
}

func RegisterMembersServerServer(s grpc.ServiceRegistrar, srv MembersServerServer) {
	// If the following call pancis, it indicates UnimplementedMembersServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MembersServer_ServiceDesc, srv)
}

func _MembersServer_NewMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServerServer).NewMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MembersServer_NewMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServerServer).NewMembers(ctx, req.(*NewMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersServer_DelMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServerServer).DelMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MembersServer_DelMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServerServer).DelMembers(ctx, req.(*DelMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MembersServer_ServiceDesc is the grpc.ServiceDesc for MembersServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MembersServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.MembersServer",
	HandlerType: (*MembersServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewMembers",
			Handler:    _MembersServer_NewMembers_Handler,
		},
		{
			MethodName: "DelMembers",
			Handler:    _MembersServer_DelMembers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}

const (
	RemoteServer_Call_FullMethodName   = "/protos.RemoteServer/Call"
	RemoteServer_Notify_FullMethodName = "/protos.RemoteServer/Notify"
)

// RemoteServerClient is the client API for RemoteServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteServerClient interface {
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error)
}

type remoteServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteServerClient(cc grpc.ClientConnInterface) RemoteServerClient {
	return &remoteServerClient{cc}
}

func (c *remoteServerClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, RemoteServer_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteServerClient) Notify(ctx context.Context, in *NotifyRequest, opts ...grpc.CallOption) (*NotifyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NotifyResponse)
	err := c.cc.Invoke(ctx, RemoteServer_Notify_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteServerServer is the server API for RemoteServer service.
// All implementations should embed UnimplementedRemoteServerServer
// for forward compatibility.
type RemoteServerServer interface {
	Call(context.Context, *CallRequest) (*CallResponse, error)
	Notify(context.Context, *NotifyRequest) (*NotifyResponse, error)
}

// UnimplementedRemoteServerServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRemoteServerServer struct{}

func (UnimplementedRemoteServerServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedRemoteServerServer) Notify(context.Context, *NotifyRequest) (*NotifyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Notify not implemented")
}
func (UnimplementedRemoteServerServer) testEmbeddedByValue() {}

// UnsafeRemoteServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteServerServer will
// result in compilation errors.
type UnsafeRemoteServerServer interface {
	mustEmbedUnimplementedRemoteServerServer()
}

func RegisterRemoteServerServer(s grpc.ServiceRegistrar, srv RemoteServerServer) {
	// If the following call pancis, it indicates UnimplementedRemoteServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RemoteServer_ServiceDesc, srv)
}

func _RemoteServer_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServerServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteServer_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServerServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteServer_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteServerServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RemoteServer_Notify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteServerServer).Notify(ctx, req.(*NotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteServer_ServiceDesc is the grpc.ServiceDesc for RemoteServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.RemoteServer",
	HandlerType: (*RemoteServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _RemoteServer_Call_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _RemoteServer_Notify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster.proto",
}
